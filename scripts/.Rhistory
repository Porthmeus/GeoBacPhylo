names(otu)
rownames(otu)
sel <- !(rownames(otu) %in% nm)
return(sum(otu[sel,])/sum(otu))
sum(otu[sel,])/sum(otu)
a <- sapply(1:1000, maxFracTrhl)
maxFracTrhl <- function(x){
nm <- names(sort(maxFrac))[1:x]
sel <- !(rownames(otu) %in% nm)
return(sum(otu[sel,])/sum(otu))
}
a <- sapply(1:1000, maxFracTrhl)
a <- sapply(1:1000, maxFracTrhl)
plot(a,sort(maxFrac)[1:1000], type ="l")
plot(a,sort(maxFrac)[1:1000], type ="l")
plot(sort(maxFrac)[1:1000],a, type ="l")
seq?
?seq
a <- sapply(seq(1:length(maxFrac), by =100), maxFracTrhl)
seq(1:length(maxFrac), by =100)
seq(1,length(maxFrac), by =100)
a <- sapply(seq(1,length(maxFrac), by =50), maxFracTrhl)
steps <- seq(1,length(maxFrax), by = 20)
steps <- seq(1,length(maxFrac), by = 20)
a <- sapply(steps, maxFracTrhl)
plot(a,sort(maxFrac)[steps], type ="l")
plot(a,sort(maxFrac)[steps], type ="l")
a
steps
steps <- seq(1,length(maxFrac), by = 20)
plot(sort(maxFrac)[steps],a, type ="l")
dev.new()
plot(sort(maxFrac)[steps],a, type ="l")
plot(steps,a, type ="l")
plot(sort(maxFrac)[steps],a, type ="l")
plot(steps,a, type ="l")
require(parallel)
steps <- seq(1,length(maxFrac), by = 20)
a <- mclapply(steps, maxFracTrhl)
head(a)
head(unlist(a))
no_cores <- detectCores()-1
cl<- makeCluster(no_cores)
a <- parlapply(steps, maxFracTrhl)
a <- parLapply(cl,steps, maxFracTrhl)
a <- parSapply(cl, steps, maxFracTrhl)
stopCluster(cl)
require(phyloseq)
require(vegan)
require(ggplot2)
require(DESeq2)
require(parallel)
?clusterExport
clusterExport(cl,"otu")
# find a good threshold to remove most of the bacteria which are only spuriously found
# calculate the maximum contribution (as fraction) to each sample of each ASV and take the maximum for each ASV
no_cores <- detectCores()-1
cl<- makeCluster(no_cores)
clusterExport(cl,"otu")
clusterExport(cl,"maxFrac")
clusterExport(cl,"maxFracTrhl")
steps <- seq(1,length(maxFrac), by = 20)
a <- parSapply(cl, steps, maxFracTrhl)
a
steps <- seq(1,length(maxFrac), by = 5)
a <- parSapply(cl, steps, maxFracTrhl)
stopCluster(cl)
plot(sort(maxFrac)[steps],a, type ="l")
dev.new()
plot(sort(maxFrac)[steps],a, type ="l")
plot(steps,a,type="l")
dev.new()
plot(steps,a,type="l")
no_cores <- detectCores()-1
cl<- makeCluster(no_cores)
clusterExport(cl,"otu")
clusterExport(cl,"maxFrac")
clusterExport(cl,"maxFracTrhl")
steps <- seq(1,length(maxFrac), by = 1)
a <- parSapply(cl, steps, maxFracTrhl)
steps
length(steps)
length(maxFrac)
clusterExport(cl,"otu")
clusterExport(cl,"maxFrac")
clusterExport(cl,"maxFracTrhl")
steps <- seq(1,length(maxFrac), by = 2)
a <- parSapply(cl, steps, maxFracTrhl)
stopCluster(cl)
df <- data.frame(No_of_bacteria=steps, threshold = sort(maxFrac)[steps], remaining_seq_info = a)
df
p <-
plot(sort(maxFrac)[steps],a, type ="l")
#p <-
plot(sort(maxFrac)[steps],a, type ="l")
dev.new()
plot(sort(maxFrac)[steps],a, type ="l")
plot(steps,a)
diff(a)
plot(diff(a))
summary(plot(diff(a)))
head(diff(a))
summary(diff(a))
hist(diff(a))
hist(1-diff(a))
hist(log(1-diff(a)))
acf(a)
acf(diff(a))
plot(diff(a), type = "l"
)
plot(1-diff(a), type = "l"
)
abline(h = mean(1-diff(a)))
abline(h = median(1-diff(a)))
plot(sort(maxFrac)[steps],a, type ="l")
plot(steps,a, type ="l")
plot(1-diff(a), type = "l"
)
mad(1-diff(a))
median(1-diff(a))
median(1-diff(a))+3*mad(1-diff(a))
sel <- 1-diff(a) < median(1-diff(a))+3*mad(1-diff(a))
table(sel)
steps(sel)
steps[sel]
steps[!sel]
min(steps[!sel])
p_noASV <- ggplot(df, aes(y = remaining_seq_info, y= No_of_bacteria)) +
geom_line()
p_noASV <- ggplot(df, aes(y = remaining_seq_info, x= No_of_bacteria)) +
geom_line()
p_noASV
p_noASV <- ggplot(df, aes(y = remaining_seq_info, x= No_of_bacteria)) +
geom_line() +
y_lim(0.9,1)
p_noASV <- ggplot(df, aes(y = remaining_seq_info, x= No_of_bacteria)) +
geom_line() +
ylim(0.9,1)
p_noASV
p_thr <- ggplot(df, aes( y = remaining_seq_info, x = threshold)) +
geom_line() +
ylim(0.9.1)
p_thr <- ggplot(df, aes( y = remaining_seq_info, x = threshold)) +
geom_line()
p_thr
splom(df)
splom(df, type = "l")
p_thrBac <- ggplot(df, aes( y = No_of_bacteria, x = threshold)) +
geom_line()
p_thrBac
p_thrBac <- ggplot(df, aes(x = No_of_bacteria, y = threshold)) +
geom_line()
p_thrBac <- ggplot(df, aes(x = No_of_bacteria, y = threshold)) +
p_thrBac
p_thrBac <- ggplot(df, aes(x = No_of_bacteria, y = threshold)) +
geom_line() +
ylim(0,0.1)
p_thrBac <- ggplot(df, aes(x = No_of_bacteria, y = threshold)) +
p_thrBac
p_thrBac <- ggplot(df, aes(x = No_of_bacteria, y = threshold)) +
geom_line() +
ylim(0,0.05)
p_thrBac
require(phyloseq)
require(vegan)
require(ggplot2)
require(cowplot)
require(DESeq2)
require(parallel)
p_all<- plot_grid(p_noASV, p_thr, p_thrBac, ncol = 1)
o
require(cowplot)
p_all<- plot_grid(p_noASV, p_thr, p_thrBac, ncol = 1)
p_noASV <- ggplot(df, aes(y = remaining_seq_info, x= No_of_bacteria)) +
geom_line() +
ylim(0.9,1)
p_thr <- ggplot(df, aes( y = remaining_seq_info, x = threshold)) +
geom_line()
p_thrBac <- ggplot(df, aes(x = No_of_bacteria, y = threshold)) +
geom_line() +
ylim(0,0.05)
p_all<- plot_grid(p_noASV, p_thr, p_thrBac, ncol = 1)
p_all
p_noASV <- ggplot(df, aes(y = remaining_seq_info, x= No_of_bacteria)) +
geom_line() +
ylim(0.9,1)
p_thr <- ggplot(df, aes( y = remaining_seq_info, x = threshold)) +
geom_line() +
ylim(0.9,1)
p_thrBac <- ggplot(df, aes(x = No_of_bacteria, y = threshold)) +
geom_line() +
ylim(0,0.05)
p_all<- plot_grid(p_noASV, p_thr, p_thrBac, ncol = 1)
p_all
p_thr <- ggplot(df, aes( y = remaining_seq_info, x = threshold)) +
geom_line() +
ylim(0.9,1) +
xlim(0,0.05)
p_all<- plot_grid(p_noASV, p_thr, p_thrBac, ncol = 1)
p_all
thr <- max(df$threshold)
sel <- df$remaining_seq_info >0.95
thr <- max(df$threshold[sel])
thr
p_all
p_thr <- ggplot(df, aes( y = remaining_seq_info, x = threshold)) +
geom_line() +
ylim(0.8,1) +
xlim(0,0.05)
p_all<- plot_grid(p_noASV, p_thr, p_thrBac, ncol = 1)
p_all
p_thr <- ggplot(df, aes( y = remaining_seq_info, x = threshold)) +
geom_line() +
ylim(0.85,1) +
xlim(0,0.05)
p_all<- plot_grid(p_noASV, p_thr, p_thrBac, ncol = 1)
p_all
# remove all bacteria, which contribute less than 1% to the microbial community, unless its prevalent in more than 3 samples and vice versa (bacteria that contribute less than 1% but is prevalent in more than 3 samples are not filtered)
prevalence <- apply(otu2, 1, function(x) sum(x>0))
range(prevalence)
# remove all bacteria, which contribute less than 1% to the microbial community, unless its prevalent in more than 3 samples and vice versa (bacteria that contribute less than 1% but is prevalent in more than 3 samples are not filtered)
prevalence <- apply(otu, 1, function(x) sum(x>0))
# remove all bacteria, which contribute less than 1% to the microbial community, unless its prevalent in more than 3 samples and vice versa (bacteria that contribute less than 1% but is prevalent in more than 3 samples are not filtered)
range(prevalence)
head(prevalence)
# remove all bacteria, which contribute less than 1% to the microbial community, unless its prevalent in more than 3 samples and vice versa (bacteria that contribute less than 1% but is prevalent in more than 3 samples are not filtered)
prevalence <- apply(otu, 1, function(x) sum(x>0))
seqInfo <- sapply(unique(prevalence), function(x){
sel <- names(prevalence[prevalence > x])
return(otu[sel,]/sum(otu))
})
x
x <- 3
sel <- names(prevalence[prevalence > x])
head(sel)
return(otu[sel,]/sum(otu))
head(otu[sel,]
)
seqInfo <- sapply(unique(prevalence), function(x){
sel <- names(prevalence[prevalence > x])
return(otu[sel,]/sum(otu))
})
seqInfo <- sapply(unique(prevalence), function(x){
print(x)
sel <- names(prevalence[prevalence > x])
return(otu[sel,]/sum(otu))
})
seqInfo <- sapply(unique(prevalence), function(x){
print(x)
sel <- names(prevalence[prevalence >= x])
return(otu[sel,]/sum(otu))
})
seqInfo <- sapply(sort(unique(prevalence)), function(x){
print(x)
sel <- names(prevalence[prevalence >= x])
return(otu[sel,]/sum(otu))
})
prevalence_uniq <- sort(unique(prevalence))
seqInfo <- sapply(prevalence_uniq, function(x){
print(x)
sel <- names(prevalence[prevalence >= x])
return(otu[sel,]/sum(otu))
})
seqInfo <- sapply(prevalence_uniq, function(x){
sel <- names(prevalence[prevalence >= x])
return(otu[sel,]/sum(otu))
})
plot(prevalence_uniq,seqInfo)
seqInfo
seqInfo <- sapply(prevalence_uniq, function(x){
sel <- names(prevalence[prevalence >= x])
return(sum(otu[sel,])/sum(otu))
})
plot(prevalence_uniq, seqInfo)
dev.new()
plot(prevalence_uniq, seqInfo)
plot(prevalence_uniq, seqInfo)
dev.new()
plot(prevalence_uniq, seqInfo)
numBac <- sapply(prevalence_uniq, function(x) length(prevalence[prevalence >=x))
numBac <- sapply(prevalence_uniq, function(x) length(prevalence[prevalence >=x]))
plot(numBac, seqInfo)
# remove all bacteria, which contribute less than 1% to the microbial community, unless its prevalent in more than 3 samples and vice versa (bacteria that contribute less than 1% but is prevalent in more than 3 samples are not filtered)
prevalence <- apply(otu, 1, function(x) sum(x>0))
prevalence_uniq <- sort(unique(prevalence), decreasing = TRUE)
seqInfo <- sapply(prevalence_uniq, function(x){
sel <- names(prevalence[prevalence >= x])
return(sum(otu[sel,])/sum(otu))
})
numBac <- sapply(prevalence_uniq, function(x) length(prevalence[prevalence >=x]))
plot(prevalence_uniq, seqInfo)
df2 <- data.frame(threshold = prevalence_uniq, No_of_Bacteria = numBac, remaining_seq_info)
df2 <- data.frame(threshold = prevalence_uniq, No_of_Bacteria = numBac, remaining_seq_info=seqInfo)
splom(df2, type = "l")
dev.new()
splom(df2, type = "l")
splom(df, type = "l")
splom(df, type = "l")
p_noASV2 <- ggplot(df2, aes(y = remaining_seq_info, x= No_of_bacteria)) +
geom_line() +
ylim(0.9,1)
p_thr2 <- ggplot(df2, aes( y = remaining_seq_info, x = threshold)) +
geom_line() +
ylim(0.85,1) +
xlim(0,0.05)
p_thrBac2 <- ggplot(df2, aes(x = No_of_bacteria, y = threshold)) +
geom_line() +
ylim(0,0.05)
p_all2<- plot_grid(p_noASV2, p_thr2, p_thrBac2, ncol = 1)
p_all2
df2 <- data.frame(threshold = prevalence_uniq, No_of_bacteria = numBac, remaining_seq_info=seqInfo)
p_noASV2 <- ggplot(df2, aes(y = remaining_seq_info, x= No_of_bacteria)) +
geom_line() +
ylim(0.9,1)
p_thr2 <- ggplot(df2, aes( y = remaining_seq_info, x = threshold)) +
geom_line() +
ylim(0.85,1) +
xlim(0,0.05)
p_thrBac2 <- ggplot(df2, aes(x = No_of_bacteria, y = threshold)) +
geom_line() +
ylim(0,0.05)
p_all2<- plot_grid(p_noASV2, p_thr2, p_thrBac2, ncol = 1)
p_all2
p_noASV2 <- ggplot(df2, aes(y = remaining_seq_info, x= No_of_bacteria)) +
geom_line() +
ylim(0.9,1)
p_thr2 <- ggplot(df2, aes( y = remaining_seq_info, x = threshold)) +
geom_line() +
ylim(0.85,1) +
p_thrBac2 <- ggplot(df2, aes(x = No_of_bacteria, y = threshold)) +
geom_line() +
p_all2<- plot_grid(p_noASV2, p_thr2, p_thrBac2, ncol = 1)
p_noASV2 <- ggplot(df2, aes(y = remaining_seq_info, x= No_of_bacteria)) +
geom_line() +
ylim(0.9,1)
p_thr2 <- ggplot(df2, aes( y = remaining_seq_info, x = threshold)) +
geom_line() +
ylim(0.85,1)
p_thrBac2 <- ggplot(df2, aes(x = No_of_bacteria, y = threshold)) +
geom_line()
p_all2<- plot_grid(p_noASV2, p_thr2, p_thrBac2, ncol = 1)
p_all2
p_noASV2 <- ggplot(df2, aes(y = remaining_seq_info, x= No_of_bacteria)) +
geom_line() +
p_thr2 <- ggplot(df2, aes( y = remaining_seq_info, x = threshold)) +
geom_line() +
p_thrBac2 <- ggplot(df2, aes(x = No_of_bacteria, y = threshold)) +
geom_line()
p_all2<- plot_grid(p_noASV2, p_thr2, p_thrBac2, ncol = 1)
p_noASV2 <- ggplot(df2, aes(y = remaining_seq_info, x= No_of_bacteria)) +
geom_line()
p_thr2 <- ggplot(df2, aes( y = remaining_seq_info, x = threshold)) +
geom_line()
p_thrBac2 <- ggplot(df2, aes(x = No_of_bacteria, y = threshold)) +
geom_line()
p_all2<- plot_grid(p_noASV2, p_thr2, p_thrBac2, ncol = 1)
p_all2
p_noASV2 <- ggplot(df2, aes(y = remaining_seq_info, x= No_of_bacteria)) +
geom_line()
p_thr2 <- ggplot(df2, aes( y = remaining_seq_info, x = threshold)) +
geom_line() +
ylim (0,10)
p_thrBac2 <- ggplot(df2, aes(x = No_of_bacteria, y = threshold)) +
geom_line() +
xlim(0,10)
p_all2<- plot_grid(p_noASV2, p_thr2, p_thrBac2, ncol = 1)
p_all2
p_thr2 <- ggplot(df2, aes( y = remaining_seq_info, x = threshold)) +
geom_line() +
xlim (0,10)
p_thrBac2 <- ggplot(df2, aes(x = No_of_bacteria, y = threshold)) +
geom_line() +
ylim(0,10)
p_all2<- plot_grid(p_noASV2, p_thr2, p_thrBac2, ncol = 1)
p_all2
p_thr2 <- ggplot(df2, aes( y = remaining_seq_info, x = threshold)) +
geom_line() +
xlim (0,10) +
ylim(0.75,1)
p_thrBac2 <- ggplot(df2, aes(x = No_of_bacteria, y = threshold)) +
geom_line() +
ylim(0,10)
p_all2<- plot_grid(p_noASV2, p_thr2, p_thrBac2, ncol = 1)
p_all2
p_noASV2 <- ggplot(df2, aes(y = remaining_seq_info, x= No_of_bacteria)) +
geom_line()
p_thr2 <- ggplot(df2, aes( y = remaining_seq_info, x = threshold)) +
geom_line() +
xlim (0,8) +
ylim(0.75,1)
p_thrBac2 <- ggplot(df2, aes(x = No_of_bacteria, y = threshold)) +
geom_line() +
ylim(0,8)
p_all2<- plot_grid(p_noASV2, p_thr2, p_thrBac2, ncol = 1)
p_all2
sel <- ((prevalence >3 | maxFrac >0.01))
table(sel)
sum(otu[sel,])/sum(otu)
round((sum(otu2)/sum(otu))*100, digits = 2)
otu2 <- otu[sel,]
round((sum(otu2)/sum(otu))*100, digits = 2)
sum(sel)
sum(!sel)
# log the library size, scale it to center mean and by sd, take the upper bound, reverse the sign and apply it as lower bound filter
depth <- apply(otu2,2,sum)
sel <- scale(log(depth+1)) < -1*max(scale(log(depth+1)))
hist(log(depth))
hist(log(depth+1))
sel
# log the library size, scale it to center mean and by sd, take the upper bound, reverse the sign and apply it as lower bound filter
depth <- apply(otu2,2,sum)
sel <- scale(log(depth+1)) < -1*max(scale(log(depth+1)))
otu3 <- otu2[,!sel]
sum(otu3)/sum(otu)
sum(!sel)
sum(sel)
min(depth[!sel])
hist(depth)
range(depth)
range(depth[!sel])
hist(depth[!sel])
hist(log(depth[!sel]+1))
hist(log(depth+1))
abline(v = -1*max(scale(log(depth+1))), col = "red")
hist(log(depth+1))
abline(v = -1*max(scale(log(depth+1))), col = "red")
hist(log(depth+1))
abline(v = -1*max(scale(log(depth+1))), col = "red")
-1*max(scale(log(depth+1))), col = "red")
-1*max(scale(log(depth+1))), col = "red"
-1*max(scale(log(depth+1)))
abline(v = (-1*max(scale(log(depth+1))) + mean(log(depth+1)))* sd(log(depth+1)), col = "red")
hist(log(depth+1))
abline(v = (-1*max(scale(log(depth+1))) + mean(log(depth+1)))* sd(log(depth+1)), col = "red")
hist(log(depth+1))
abline(v = (-1*max(scale(log(depth+1))) + mean(log(depth+1)))* sd(log(depth+1)), col = "red")
hist(scale(log(depth+1)))
abline(v = -1*max(scale(log(depth+1))), col = "red")
hist(scale(log(depth+1)))
abline(v = -1*max(scale(log(depth+1))), col = "red")
hist(scale(log(depth+1)), xlab = "Scaled and log(Library depth)")
hist(scale(log(depth+1)), xlab = "Scaled and log(Library depth)")
abline(v = -1*max(scale(log(depth+1))), col = "red")
hist(scale(log(depth+1)), xlab = "Scaled log(Library depth)")
hist(scale(log(depth+1)), xlab = "Scaled log(Library depth)")
abline(v = -1*max(scale(log(depth+1))), col = "red")
hist(scale(log(depth+1)), xlab = "Scaled log(Library depth)", breaks = 20)
abline(v = -1*max(scale(log(depth+1))), col = "red")
abline(v = -1*max(scale(log(depth+1))), col = "red")
hist(scale(log(depth+1)), xlab = "Scaled log(Library depth)", breaks = 20)
abline(v = -1*max(scale(log(depth+1))), col = "red")
# artificially add a single count all
otu4 <- otu3+1
class(otu4)
phy2 <- merge_phyloseq(otu4, phy)
?diversity
?phyloseq::distance
a <- distance(phy2, method = "wunifrac")
class(phy2)
phy2
phy@tax_table
# construct a phyloseq object
sm <- colnames(otu4)
tax <- phy@tax_table[asv,]
asv <- rownames(otu4)
tax <- phy@tax_table[asv,]
phy@sam_data
sm_dat <- phy@sam_data[sm,]
phy@phy_tree
phy@phy_tree[asv,]
phy@phy_tree[asv]
phy@phy_tree$tip.label
tax <- phy@tax_table[asv,]
sm_dat <- phy@sam_data[sm,]
tax@.Data
tax@.Data$rep.seq
tax@.Data[,"rep.seq"]
seqs <- tax@.Data[asv,"rep.seq"]
seqs[[1]]
length(seqs[[1]])
length(unlist(seqs[[1]]))
length(strsplit(seqs[[1]], split="")[[1]])
ab <- strsplit(seqs[[1]], split="")
unlist(lapply(ab, length)
)
head(ab)
ab <- strsplit(seqs, split="")
head(ab)
require(phyloseq)
require(vegan)
require(ggplot2)
require(cowplot)
require(DESeq2)
require(parallel)
require(qiime2R)
repseqs <- qza_to_phyloseq("../data/PE_denoise_dada2_RS.qza")
repseqs <- qza_to_phyloseq("../data/PE_denoise_dada2_RS.qza")
repseqs <- qza_to_phyloseq("../data/PE_denoise_dada2NoFilt_RS.qza")
tree <- phy@phy_tree
tree
tax
tax[,"rep.seq"]
seqs <- tax[,"rep.seq"]
head(seqs)
seqs <- as.data.frame(tax[,"rep.seq"])
head(seqs)
require(Biostings)
require(Biostrings)
seqs2 <- DNAStringSet(seqs)
seqs2 <- DNAStringSet(seqs[1])
seqs2 <- DNAStringSet(seqs[1,])
seqs2
